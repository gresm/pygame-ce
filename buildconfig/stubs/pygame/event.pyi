from typing import Any, Union, Optional

from pygame.typing import SequenceLike, EventLike


class Event(EventLike):
    def __new__(cls, *args: Any, **kwargs: Any) -> "Event": ...

_EventTypes = Union[int, SequenceLike[int]]

def pump() -> None: ...
def get(
    eventtype: Optional[_EventTypes] = None,
    pump: Any = True,
    exclude: Optional[_EventTypes] = None,
) -> list[Event]: ...
def poll() -> Event: ...
def wait(timeout: int = 0) -> Event: ...
def peek(eventtype: Optional[_EventTypes] = None, pump: Any = True) -> bool: ...
def clear(eventtype: Optional[_EventTypes] = None, pump: Any = True) -> None: ...
def event_name(type: int) -> str: ...
def set_blocked(type: Optional[_EventTypes], *args: int) -> None: ...
def set_allowed(type: Optional[_EventTypes], *args: int) -> None: ...
def get_blocked(type: _EventTypes, *args: int) -> bool: ...
def set_grab(grab: bool, /) -> None: ...
def get_grab() -> bool: ...
def post(event: Event, /) -> bool: ...
def custom_type() -> int: ...
def init() -> None: ...
def quit() -> None: ...

EventType = Event
